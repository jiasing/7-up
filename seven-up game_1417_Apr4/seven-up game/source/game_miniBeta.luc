module game_miniBeta (
    input up_button,
    input plus_button,
    
    input clk,  // clock
    input rst,  // reset
    
    output debug_out[16],
    output test_case0[16],
    output test_case1[16],
    output debug_slowclock,
    output debug_vcclock,
    output debug_random[8],
   
    
    output decimal_counter_increase,
    output decimal_counter_rst
  ) {
  
  //temp variables
  sig inputAlu_a[16];
  sig inputAlu_b[16];
  
  alu game_alu;

  .clk(clk){
    //edge_detector edge_detector_variableCounter (#RISE(1), #FALL(0));  JS: Im sure we dont need this
    edge_detector game_timer_detector(#RISE(1), #FALL(0));
    
    .rst(rst){
      game_CU game_controlunit;
      game_miniRegfiles regfiles;
      
      variable_counter vc;
      counter slow_timer(#SIZE(1),#DIV(26)); 

    }
  }
  always {
  
    debug_random = 0;
    
    //edge detectors
    game_timer_detector.in = slow_timer.value; // 30 second timer detector
    //edge_detector_variableCounter.in = vc.out; // random counter increase signal JS: Im sure we dont need this
    
    //pass timer and counter signals to CU unit 
    //game_controlunit.increase_counter = edge_detector_variableCounter.out; JS: Im sure we dont need this
    game_controlunit.timer = game_timer_detector.out;
    
    //pass button press signal to CU unit
    game_controlunit.up_button = up_button;
    game_controlunit.plus_button = plus_button;
    
    //output of CU to increase 7segment
    decimal_counter_increase = game_controlunit.decimal_counter_increase;
    decimal_counter_rst = game_controlunit.decimal_counter_rst;
    
    //Setup REGFILE unit 
    regfiles.we = game_controlunit.we_regfile;
    regfiles.write_address = game_controlunit.regfile_write_address;
   
    regfiles.read_address_a = game_controlunit.regfile_read_address_a;
    regfiles.read_address_b = game_controlunit.regfile_read_address_b;
    
    //bootstrap reg_b output to CU for convenient branching conditions
    game_controlunit.regfile_datain = regfiles.out_b;
    
    //asel mux
    case(game_controlunit.asel){
      b00  : inputAlu_a = regfiles.out_a;
      b01  : inputAlu_a = 1; 
      b10  : inputAlu_a = 0;
      default : //b11 unused
          inputAlu_a = 0;
    }
    
    //bsel mux
    case(game_controlunit.bsel){
      b00 : inputAlu_b = regfiles.out_b;
      b01 : inputAlu_b = 1;
      b10 : inputAlu_b = 0;
      b11 : inputAlu_b = b110010;
      default: //necessary to init
          inputAlu_b = 0;
      
    }
    
    //ALU
    game_alu.a = inputAlu_a;
    game_alu.b = inputAlu_b;
    game_alu.alufn_signal = game_controlunit.alufn;
   
    
    //wdsel mux
    case (game_controlunit.alu_out_sel){
      b01 : regfiles.data = 1;
      b10 : regfiles.data = 0;
      b11 : regfiles.data = 30;
      default : //b00
          regfiles.data = game_alu.out;
    }
    
    //for debugging
  //  debug_out[3:0] = regfiles.all_buttons;
  //  debug_out[7:4] = regfiles.out;    
  //  debug_out = game_controlunit.debug;
    
    debug_out = regfiles.timer;
 //   debug_out = vc.debug;
    test_case0 = regfiles.all_scores[15:0];
    test_case1 = regfiles.all_scores[31:16];
    debug_slowclock = slow_timer.value;
    debug_vcclock = vc.out;
    debug_random = game_controlunit.debug_random;
    game_controlunit.game_start = plus_button;
 
  }
}
