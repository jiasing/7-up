module game_miniBeta (
    input up_button,
    input plus_button,
    input start_button,
    
    input clk,  // clock
    input rst,  // reset
    
    output curr_time[16],
    output curr_score[16],
   
    output curr_level[4],
    output curr_highscore[16]
  ) {
  
  //temp variables
  sig inputAlu_a[16];
  sig inputAlu_b[16];
  
  alu game_alu;

  .clk(clk){
    edge_detector game_timer_detector(#RISE(1), #FALL(0));
    
    .rst(rst){
      game_CU game_controlunit;
      game_miniRegfiles regfiles;
      
      counter slow_timer(#SIZE(1),#DIV(26)); 

    }
  }
  always {
    
    //edge detectors
    game_timer_detector.in = slow_timer.value; // 30 second timer detector
  
    //pass timer and counter signals to CU unit 
    game_controlunit.timer = game_timer_detector.out;
    
    //pass button press signal to CU unit
    game_controlunit.up_button = up_button;
    game_controlunit.plus_button = plus_button;
    
    //Setup REGFILE unit 
    regfiles.we = game_controlunit.we_regfile;
    regfiles.write_address = game_controlunit.regfile_write_address;
   
    regfiles.read_address_a = game_controlunit.regfile_read_address_a;
    regfiles.read_address_b = game_controlunit.regfile_read_address_b;
    
    //bootstrap reg_b output to CU for convenient branching conditions
    game_controlunit.regfile_datain = regfiles.out_b;
    
    //asel mux
    case(game_controlunit.asel){
      b00  : inputAlu_a = regfiles.out_a;
      b01  : inputAlu_a = 1; 
      b10  : inputAlu_a = 0;
      default : //b11 unused
          inputAlu_a = 0;
    }
    
    //bsel mux
    case(game_controlunit.bsel){
      b00 : inputAlu_b = regfiles.out_b;
      b01 : inputAlu_b = 1;
      b10 : inputAlu_b = 0;
      b11 : inputAlu_b = b110010;
      default: //necessary to init
          inputAlu_b = 0;
      
    }
    
    //ALU
    game_alu.a = inputAlu_a;
    game_alu.b = inputAlu_b;
    game_alu.alufn_signal = game_controlunit.alufn;
   
    
    //wdsel mux
    case (game_controlunit.alu_out_sel){
      b01 : regfiles.data = 1;
      b10 : regfiles.data = 0;
      b11 : regfiles.data = 31;
      default : //b00
          regfiles.data = game_alu.out;
    }
    
    curr_time = regfiles.timer;
    curr_score = regfiles.curr_score; //current_score
    curr_highscore = regfiles.curr_highscore;
    
    game_controlunit.game_start = start_button;
    curr_level = regfiles.curr_level;
  }
}
