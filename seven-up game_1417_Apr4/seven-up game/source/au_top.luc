module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [7],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  var current_score_1;
  var current_score_10;
  var current_score_100;
  var current_highscore_1;
  var current_highscore_10;
  var current_highscore_100;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    .rst(rst){
      multi_seven_seg seg;
      game_miniBeta gameMachine;
    }
    
    reset_conditioner reset_cond;

    edge_detector edge_dt_plus (#RISE(1), #FALL(0));
    edge_detector edge_dt_UP(#RISE(1), #FALL(0));
    edge_detector edge_dt_START(#RISE(1), #FALL(0));

    button_conditioner btn_cond_plus;
    button_conditioner btn_cond_UP;
    button_conditioner btn_cond_START;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
     
    btn_cond_plus.in=io_button[4]; //to reduce the bouncing effects of your button 
    edge_dt_plus.in=btn_cond_plus.out; //get the edge of button press
    gameMachine.plus_button = edge_dt_plus.out; // + is RIGHT BUTTON
    
    btn_cond_UP.in=io_button[3];
    edge_dt_UP.in=btn_cond_UP.out;  
    gameMachine.up_button = edge_dt_UP.out; //UP is LEFT BUTTON.
    
    btn_cond_START.in=io_button[2];
    edge_dt_START.in=btn_cond_START.out;  
    gameMachine.start_button = edge_dt_START.out; //START IS DOWN BUTTON

    
    //show the counter value at led   
    io_led[2] = gameMachine.curr_time;   
    io_led[0] = gameMachine.curr_score;
    
    //current_score
    current_score_100 = gameMachine.curr_score / 100;
    current_score_10 = (gameMachine.curr_score - current_score_100 * 100) / 10;
    current_score_1 = (gameMachine.curr_score - current_score_100 * 100 - current_score_10 * 10);
    
    //current highscore
    current_highscore_100 = gameMachine.curr_highscore / 100;
    current_highscore_10 = (gameMachine.curr_highscore - current_highscore_100 * 100) / 10;
    current_highscore_1 = (gameMachine.curr_highscore - current_highscore_100 * 100 - current_highscore_10 * 10);
    
    
    //update 7segments
    seg.values[0] = current_score_1;
    seg.values[1] = current_score_10;
    seg.values[2] = current_score_100;
    seg.values[3] = gameMachine.curr_level;
    seg.values[4] = current_highscore_1;
    seg.values[5] = current_highscore_10;
    seg.values[6] = current_highscore_100;

    
    io_seg = ~seg.seg;
    io_sel = ~seg.sel;
  }
}